---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Spring01-IOC】
    【demo1_introduction】
         【控制就是获得实例的过程】UserService、UserServiceImpl、
             以前我们通过new来获取一个实例对象，现在可以使用Spring容器来获取实例对象。
             注意Junit的使用。pom.xml中scope范围对应test。 //@Test注解
    【demo2_ioc1】
         【准备】
             【导包spring-context】
                 spring-context包括spring-expression、spring-core（包括spring-jcl）、spring-aop、spring-beans
                 Maven中的小板凳标志可以可视化的看到包之间的依赖关系。
                 IDEA默认的Maven不是阿里的，外网下载比较慢，可以在setting->Maven中查看更改Maven的路径、版本、配置、仓库。
             【业务代码】UserService、UserServiceImpl
             【Spring官网配置文件】
                 链接地址：https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#xsd-schemas-context
                 可以复制该内容，并编辑一个文件模板，以备后用。
             【resource中创建application.xml】
                 使用刚刚生成的文件模板。
             【使用反射获取实例对象】IOCTest.test1()
                 Spring就是基于反射获取类的实例的。
                 Class.forName()、aClass.newInstance()
         【使用Spring】
             【在application.xml中注册组件】
                 <com.bean>标签、id属性、class属性
             【方式1---组件id】IOCTest.test2()
                 spring容器提供了应用上下文applicationContext，通过应用上下文可以获得组件。
                     需要加载spring配置文件 -> 直接写resources（classpath）下的配置文件名。
                     new ClassPathXmlApplicationContext("application.xml");
                 获取实例对象：applicationContext.getBean("userService")  //getBean()中的字符串参数是，要获取的对象所属的组件的id。
             【方式2---类的类型class】IOCTest.test3()
                 加载应用上下文同方式1。
                 获取实例对象：applicationContext.getBean(UserServiceImpl.class); //通过要加载的类的类型来获取实例对象。
             【方式1和方式2的比较】
                 同一个类型的组件不唯一（也就是在application.xml中用不同的id注册了两次），则方式1不会报异常，而方式2会报异常。
    【demo3_ioc2】
         【业务代码】User、UserDao、UserDaoImpl、UserService、UserServiceImpl
              //lombok的使用
              //application.xml中，bean标签的property子标签的name属性和ref属性。
                注意，这里name属性的值和bean标签对应的类的set方法的方法名是必须对应的，
                比如说，UserService中包含成员变量UserDao，
                      如果UserService中的set方法名是setUserDaoz()，则spring配置文件中UserService对应的bean标签的子标签（对应UserDao）的name值应该是userDaoz。
                      如果UserService采用了@Data注解（默认为setUserDao()），则name值应该为userDao。
         【使用se的形式】IOCTest.test1()
         【使用spring的形式】IOCTest.test2()【这块有点乱】
         【比较】
             [1]直接通过spring容器获取UserDao；
             [2]先通过spring容器获取UserService，在通过UserService的getUserDao()获取UserDao；
             [3] [1][2]两种方式获取到的UserDao是同一个。
         【ClassPathXmlApplicationContext和FileSystemXmlApplicationContext】ApplicationContextTest
             [1]ClassPathXmlApplicationContext
                   classpath：resources（或java）下的文件名
                   new ClassPathXmlApplicationContext("application.xml")
             [2]FileSystemXmlApplicationContext
                   文件系统：文件的全名
                   new FileSystemXmlApplicationContext(configPath);//configPath是application.xml的绝对路径。
             [3]ClassPathXmlApplicationContext和FileSystemXmlApplicationContext的比较
                   两者获取到的bean不是同一个，因为上下文就不是同一个。
             //Ctr+H查找键，向上查找、向下查找。
    【demo4_scope】
         【bean的作用域】
             //默认情况下：true          //获得的是同一个bean
             //scope=singleton  true   //获得的是同一个bean
             //scope=prototype  false  //获得的不是同一个bean
         【singleton，但是上下文不同】
             获取的不是同一个bean，因为spring容器上下文不同。
    【demo5_regist】NoArgsConstructorBean、AllArgsConstructorBean、application.xml、registTest
         【组件注册---无参构造】
             <com.bean>标签的子标签<property>的name属性（和bean的成员变量一致）、value属性（注意和ref属性的区别）
         【组件注册---有参构造】
             <com.bean>标签的子标签<constructor-arg>的name属性（和有参构造方法的参数一致，而非和成员变量一致）、value属性。
             重要：name属性的值和有参构造方法的参数一致，而非和成员变量一致。
                  采用lombok的@AllArgsConstructor注解，则显然和成员变量一致，
                  否则，一定要注意有参构造函数的形参名！（如示例中的usernameA和passwordA）
         //lombok的@NoArgsConstructor注解、@AllArgsConstructor注解
    【demo6_factory】
          //静态工厂：在静态工厂类的静态方法中return一个新创建的bean对象。
            实例工厂：在实例工厂类的非静态方法中return一个新创建的bean对象。
         【se的形式】
             //静态工厂：不需要实例化静态工厂，就可以创建一个bean对象。
               实例工厂：需要实例化实例工厂，才可以用实例工厂对象创建一个bean对象。
         【Spring的形式】
             //主要关注spring的配置文件application.xml的区别
             //静态工厂：
                 [1]直接获取bean对象
                    bean标签（bean对象）：id、class（指向静态工厂）、factory-method（静态工厂中创建bean对象的静态方法的方法名）
             //实例工厂：
                 [1]实例工厂要先实例化
                    bean标签（实例工厂对象）：id、class（指向实例工厂）
                 [2]然后在通过实例工厂的实例对象来获取bean对象
                    bean标签（bean对象）：id、factory-com.bean（实例工厂对象的id）、factory-method（实例工厂中创建bean对象的非静态方法的方法名）
    【demo7_lifecycle】
         【疑问】这一块还是比较迷
         //bean标签中的init-method属性、destory-method属性。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Spring02-AOP】
    【demo1-collection】
         //创建一个集合Bean，在类中创建各种集合类型的成员变量。  //CollectionBean
         //成员变量的类型有array、list、set、map、properties
         //包含这些类型的成员变量的bean怎么在spring配置文件中进行注册，是这个模块要解决的问题。
         【起步】
             首先，bean对象的成员变量在组件注册时，都需要一个<property>子标签。<property>标签的name属性值为成员变量名。
         【Array】
             <property> -> <array> -> <value> //<value>标签中写具体的值。
         【List】
             <property> -> <list> -> <value> //<value>标签中写具体的值。
         【Set】
             <property> -> <set> -> <value> //<value>标签中写具体的值。
         【Map】
             <property> -> <map> -> <entry> //<entry>标签的key属性、value属性中写入具体的key、value值。
         【Properties】
             <property> -> <props> -> <prop> //<prop>标签的key属性写入具体的key值，<prop>标签中写入具体的value值。
             //注意区分Map和Properties的value值写入的位置。
         【bean对象的成员变量是集合类型，并且集合的元素类型不是基本类型的包装类】
             //这里举一个User类的例子
             【起步】<property> -> <array>、<list>、<set>、<map>这部分都是一样的。
                   和之前不同的是值不再是简单的写在<value>标签中，因为现在的值是bean对象，要按照<bean>注册的形式写。
                   bean对象有国产和进口两种方式。
                   <array>、<list>、<set>最简单。
                      国产：<bean>标签&class属性（id属性不需要） -> <property>子标签&name属性&value属性。
                      进口：<ref>标签&bean属性（指向要引用的已经注册的bean的id）。
                   <map>稍有不同。
                      国产：<entry>标签&key属性 -> <bean>标签&class属性（id属性不需要） -> <property>子标签&name属性&value属性。
                      进口1：<entry>标签&key属性&value-ref属性（指向要引用的已经注册的bean的id）
                            <entry>标签&key属性 -> <ref>子标签&&bean属性（指向要引用的已经注册的bean的id）。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Spring03-Aspect】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Spring04-Tx】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【SpringMVC01】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【SpringMVC02】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【SpringMVC03】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【SpringMVC04】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【SpringMVC05】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Mybatis01】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Mybatis02】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Mybatis03】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Mybatis04】
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【Mybatis05】
---------------------------------------------------------------------------------------------------------------------------------------------------------------


